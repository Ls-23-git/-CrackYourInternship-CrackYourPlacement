private:
    bool dfs(int node,vector<int>&vis,vector<int>&pathvis,vector<int>adj[]){
        vis[node] = 1;
        pathvis[node] = 1;
        
        for(auto itr : adj[node]){
            if(vis[itr] == 0){
                if(dfs(itr,vis,pathvis,adj)) return true;
            }
            else if(vis[itr] == 1 && pathvis[itr] == 1){
                return true;;
            }
        }
        pathvis[node] = 0;
        return false;
    }
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        vector<int> vis(V,0);
        vector<int> pathvis(V,0);
        for(int i = 0;i<V;i++){
            if(vis[i] ==0){
                if(dfs(i,vis,pathvis,adj)){
                    return true;
                }
            }
        }
        return false;
    }
